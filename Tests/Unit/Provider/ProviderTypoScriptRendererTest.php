<?php

declare(strict_types=1);

namespace Sto\Mediaoembed\Tests\Unit\Provider;

use PHPUnit\Framework\TestCase;
use Sto\Mediaoembed\Provider\Endpoint;
use Sto\Mediaoembed\Provider\ProviderTypoScriptRenderer;

class ProviderTypoScriptRendererTest extends TestCase
{
    private ProviderTypoScriptRenderer $renderer;

    protected function setUp(): void
    {
        $this->renderer = new ProviderTypoScriptRenderer();
    }

    public function testRenderReturnsExpectedResult(): void
    {
        $testProvider1 = new Endpoint('test_provider_1', 'https://test.endpoint.tld', true);
        $testProvider1->addUrlScheme('#https?://([a-z0-9-]+\\.)?test\\.tld/.*#i');
        $testProvider1->addUrlScheme('#https?://(www\\.)?test2\\.tld/.*#i');

        $testProvider2 = new Endpoint('test_provider_2', 'https://test.endpoint2.tld/api/oembed', false);
        $testProvider2->addUrlScheme('#https?://([a-z0-9-]+\\.)?t3st\\.tld/.*#i');
        $testProvider2->addUrlScheme('#https?://(www\\.)?t3st2\\.tld/.*#i');

        $providers = [
            'test_provider_1' => $testProvider1,
            'test_provider_2' => $testProvider2,
        ];
        // @extensionScannerIgnoreLine
        self::assertSame($this->getExpectedResult(), $this->renderer->render($providers));
    }

    private function getExpectedResult(): string
    {
        return '// This file is autogenerated! See README.md!
plugin.tx_mediaoembed.settings.providers {
    test_provider_1 {
        endpoint = https://test.endpoint.tld
        urlRegexes {
            10 = #https?://([a-z0-9-]+\\.)?test\\.tld/.*#i
            20 = #https?://(www\\.)?test2\\.tld/.*#i
        }
    }

    test_provider_2 {
        endpoint = https://test.endpoint2.tld/api/oembed
        urlSchemes {
            10 = #https?://([a-z0-9-]+\\.)?t3st\\.tld/.*#i
            20 = #https?://(www\\.)?t3st2\\.tld/.*#i
        }
    }

}
';
    }
}
